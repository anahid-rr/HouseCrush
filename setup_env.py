#!/usr/bin/env python3
"""
Environment Setup Script for House Crush
This script helps set up the required environment variables for the application.
"""

import os
from pathlib import Path

def setup_environment():
    """Set up environment variables for the application."""
    print("üè† House Crush Environment Setup")
    print("=" * 40)
    
    # Check if .env file exists
    env_file = Path('.env')
    env_vars = {}
    
    if env_file.exists():
        print("üìÅ Found existing .env file")
        # Read existing variables
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    
    # Together AI Setup
    print("\nü§ñ Together AI Setup")
    print("-" * 20)
    if 'TOGETHER_API_KEY' not in env_vars:
        print("‚ùå TOGETHER_API_KEY not found")
        together_key = input("Enter your Together AI API key (or press Enter to skip): ").strip()
        if together_key:
            env_vars['TOGETHER_API_KEY'] = together_key
            print("‚úÖ Together AI key added")
        else:
            print("‚ö†Ô∏è  Skipping Together AI setup")
    else:
        print("‚úÖ TOGETHER_API_KEY already configured")
    
    # Perplexity API Setup
    print("\nüîç Perplexity API Setup")
    print("-" * 20)
    if 'PERPLEXITY_API_KEY' not in env_vars:
        print("‚ùå PERPLEXITY_API_KEY not found")
        print("Get your API key from: https://www.perplexity.ai/settings/api")
        perplexity_key = input("Enter your Perplexity API key (or press Enter to skip): ").strip()
        if perplexity_key:
            env_vars['PERPLEXITY_API_KEY'] = perplexity_key
            print("‚úÖ Perplexity API key added")
        else:
            print("‚ö†Ô∏è  Skipping Perplexity API setup")
    else:
        print("‚úÖ PERPLEXITY_API_KEY already configured")
    
    # OpenAI API Setup
    print("\nüß† OpenAI API Setup")
    print("-" * 20)
    if 'OPENAI_API_KEY' not in env_vars:
        print("‚ùå OPENAI_API_KEY not found")
        print("Get your API key from: https://platform.openai.com/api-keys")
        openai_key = input("Enter your OpenAI API key (or press Enter to skip): ").strip()
        if openai_key:
            env_vars['OPENAI_API_KEY'] = openai_key
            print("‚úÖ OpenAI API key added")
        else:
            print("‚ö†Ô∏è  Skipping OpenAI API setup")
    else:
        print("‚úÖ OPENAI_API_KEY already configured")
    
    # Write to .env file
    with open(env_file, 'w') as f:
        f.write("# House Crush Environment Variables\n")
        f.write("# Generated by setup_env.py\n\n")
        
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print(f"\n‚úÖ Environment variables saved to {env_file}")
    
    # Show summary
    print("\nüìã Configuration Summary:")
    print(f"Together AI: {'‚úÖ Configured' if 'TOGETHER_API_KEY' in env_vars else '‚ùå Not configured'}")
    print(f"Perplexity API: {'‚úÖ Configured' if 'PERPLEXITY_API_KEY' in env_vars else '‚ùå Not configured'}")
    print(f"OpenAI API: {'‚úÖ Configured' if 'OPENAI_API_KEY' in env_vars else '‚ùå Not configured'}")
    
    # Installation instructions
    print("\nüì¶ Installation Instructions:")
    print("1. Install Python dependencies:")
    print("   pip install -r requirements.txt")
    print("\n2. For OpenAI API (AI-powered search):")
    print("   - Get API key from: https://platform.openai.com/api-keys")
    print("   - Add to .env file: OPENAI_API_KEY=your_key_here")
    print("   - Run: python app_openai.py")
    print("\n3. For Perplexity API (real-time search):")
    print("   - Get API key from: https://www.perplexity.ai/settings/api")
    print("   - Add to .env file: PERPLEXITY_API_KEY=your_key_here")
    print("   - Run: python app.py")
    print("\n4. For Together AI (ranking and filtering):")
    print("   - Get API key from: https://together.ai/")
    print("   - Add to .env file: TOGETHER_API_KEY=your_key_here")
    print("\n5. Test the setup:")
    print("   python test_openai.py")
    print("   python test_perplexity.py")
    print("   python app.py (or app_openai.py)")

def check_dependencies():
    """Check if required dependencies are installed."""
    print("\nüîç Checking Dependencies")
    print("-" * 20)
    
    required_packages = [
        'flask',
        'python-dotenv',
        'together',
        'requests',
        'sentence-transformers',
        'fake-useragent',
        'beautifulsoup4',
        'pandas',
        'playwright',
        'numpy',
        'scikit-learn',
        'geopy',
        'schedule'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package}")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Missing packages: {', '.join(missing_packages)}")
        print("Install with: pip install -r requirements.txt")
    else:
        print("\n‚úÖ All required packages are installed")

def show_app_options():
    """Show available app options."""
    print("\nüöÄ Available Applications:")
    print("-" * 20)
    print("1. Main App (Perplexity + Local):")
    print("   python app.py")
    print("   - Uses Perplexity API for real-time search")
    print("   - Falls back to local database")
    print("   - Together AI for ranking")
    print("\n2. OpenAI App:")
    print("   python app_openai.py")
    print("   - Uses OpenAI API for AI-powered search")
    print("   - Falls back to local database")
    print("   - Together AI for ranking")
    print("\n3. Test Scripts:")
    print("   python test_perplexity.py")
    print("   python test_openai.py")

def main():
    """Main setup function."""
    setup_environment()
    check_dependencies()
    show_app_options()
    
    print("\nüéâ Setup complete!")
    print("Choose your preferred app and run it!")

if __name__ == '__main__':
    main() 